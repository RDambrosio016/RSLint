import vec
import ast
import utils
import group
import inputs
import scopes
import config
import var_decls
import name_in_scope
import variable_decl

// TODO: Strip extra info and give fields better names,
//       lint consumers can get needed info via queries
// TODO: Factor lazy symbol resolution into this somehow
typedef NoUseBeforeDef = NoUseBeforeDef {
    name: Name,
    used: ExprId,
    used_in: Span,
    declared: AnyId,
    declared_in: Span,
}

// Using variables, classes and functions before they're defined
output relation NoUseBeforeDef[NoUseBeforeDef]

// ```js
// foo(bar); // used before definition
// var bar = 10;
// ```
NoUseBeforeDef(name, expr, used_in, declared, declared_in) :-
    EnableNoUseBeforeDef(file, _),

    NameRef(expr @ ExprId { _, file }, name),
    Expression(expr, _, used_scope, used_in),
    // Make sure this NameRef isn't the name within a `new` clause,
    // ex. `new Foo(); var Foo;`
    not New(_, Some { expr }, _),
    NameInScope(name, used_scope, declared @ AnyIdStmt { stmt }),
    Statement(stmt, StmtVarDecl, declared_scope, declared_in),
    declared_scope != used_scope and used_in < declared_in.

NoUseBeforeDef(name, expr, used_in, declared, declared_in) :-
    EnableNoUseBeforeDef(file, _),

    New(expr @ ExprId { _, file }, Some { object }, _),
    Expression(expr, _, used_scope, used_in),
    NameRef(object, name),
    NameInScope(name, used_scope, declared @ AnyIdClass { class }),
    Class(class, Some { Spanned { _, declared_in }}, _, _, decl_scope, _),
    decl_scope != used_scope and used_in < declared_in.

// TODO: Integrate with directives to ignore functions if the user wants it
NoUseBeforeDef(name, expr, used_in, declared, declared_in) :-
    EnableNoUseBeforeDef(file, _),

    Call(expr @ ExprId { _, file }, Some { callee }, _),
    Expression(expr, _, used_scope, used_in),
    NameRef(callee, name),
    NameInScope(name, used_scope, declared @ AnyIdFunc { func }),
    Function(func, Some { Spanned { _, declared_in }}, decl_scope, _, _),
    decl_scope != used_scope and used_in < declared_in.

NoUseBeforeDef(name, expr, used_in, declared, declared_in) :-
    EnableNoUseBeforeDef(file, _),

    New(expr @ ExprId { _, file }, Some { object }, _),
    Expression(expr, _, used_scope, used_in),
    NameRef(object, name),
    NameInScope(name, used_scope, declared @ AnyIdStmt { decl }),
    VariableDecl(decl, _, _, Some { class }, _),
    ClassExpr(class, _),
    Expression(class, _, decl_scope, declared_in),
    decl_scope != used_scope and used_in < declared_in.
