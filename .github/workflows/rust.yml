name: Rust

on:
  push:
  pull_request:
  # Daily
  schedule:
    - cron: "0 0 * * *"

env:
  RUST_LOG: info
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Rust ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]

    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
      - run: ./ci.sh test --verbose --all-features

  clippy:
    name: Clippy
    runs-on: ubuntu-latest

    env:
      RUSTFLAGS: -Dwarnings

    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
        with:
          components: clippy
      - run: ./ci.sh clippy --all-targets --verbose --all-features

  rustfmt:
    name: Formatting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
        with:
          components: rustfmt
      - run: ./ci.sh fmt -- --check

  check-rustdoc-links:
    name: Check doc links
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: -Dwarnings

    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: nightly
      # Check every crate in the workspace except for ignored ones
      - run: |
          ignored_crates=("types", "differential_datalog", "rslint_scoping_ddlog")
          for package in $(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | .name'); do
            if [ " ${ignored_crates[@]} " =~ " ${package} " ]; then
              cargo rustdoc -p "$package" --all-features --lib -- -D warnings
            fi
          done

  deploy:
    name: Deploy for ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: rslint_cli
            asset_name: rslint_cli-linux
          - os: windows-latest
            artifact_name: rslint_cli.exe
            asset_name: rslint_cli-windows
          - os: macos-latest
            artifact_name: rslint_cli
            asset_name: rslint_cli-macos

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Build
        run: cargo build --release

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref }}
